# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: 
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'sonarqube-scanner-maven/maven-multimodule/pom.xml'
    options: '-Dmaven.wagon.http.pool=false'
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: FirstTestRun
    allowBrokenSymbolicLinks: false
    mavenOpts: '-Xmx1024m -Xdiag'
    codeCoverageToolOption: Cobertura
#    codeCoverageFailIfEmpty: true
#    ${{ if ne(parameters.customMavenVersion, '') }}:
#      mavenVersionOption: 'Path'
#      mavenDirectory: '$(Agent.BuildDirectory)/mavenVersions/apache-maven-${{ parameters.customMavenVersion }}'
#      mavenSetM2Home: true
    mavenAuthenticateFeed: true
    checkStyleRunAnalysis: true
    jdkVersionOption: 1.8
    jdkArchitecture: 'x64'
    pmdRunAnalysis: true
    findBugsRunAnalysis: true
#- task: Maven@3
#  inputs:
#    mavenPomFile: 'sonarqube-scanner-maven/maven-multimodule/pom.xml'
#    options: '-Dmaven.wagon.http.pool=false'
#    publishJUnitResults: false
#    goals: 'package install'
##    ${{ if ne(parameters.customMavenVersion, '') }}:
##      mavenVersionOption: 'Path'
##      mavenDirectory: '$(Agent.BuildDirectory)/mavenVersions/apache-maven-${{ parameters.customMavenVersion }}'
##      mavenSetM2Home: true
#    mavenAuthenticateFeed: true
#    checkStyleRunAnalysis: true
#    jdkVersionOption: 1.8
#    javaHomeSelection: Path
#    jdkDirectory: '/usr/lib/jvm/temurin-8-jdk-amd64/jre'
#    skipEffectivePom: true
#    pmdRunAnalysis: true
#    findBugsRunAnalysis: true